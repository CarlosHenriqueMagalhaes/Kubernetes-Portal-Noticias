Guia passo a passo do projeto:----------------------------------------------------------
-------------------------------------PARTE 1--------------------------------------------
1 - Foi criada uma pasta para o projeto, no caso:
2 - Utilizando o Visual Studio Code, adicionamos um novo arquivo .yaml
3 - Adicionamos o texto no arquivo .yaml no próprio Visual Code e salvamos
4 - (Opcional) Executei o software Docker Desktop
5 - abri o GIT BASH na pasta do projeto que se encontra o arquivo .yaml (também poderia
 acessar pelo power shell)

6 - executei o comando:
	kubectl apply -f \portal-noticias.yaml
esse comando instala esse pod apartir de um diretório da Alura (de onde faço esse curso)

7 - Utilizei o seguinte comando para visualizar a instalação desse pod:
	kubectl get pods --watch

8 - Por fim foi executado o comando abaixo para ver a descrição do pod 
	kubectl describe pod portal-noticias
-------------------------------------PARTE 2--------------------------------------------
1 - Foi criado no Visual Code o pod-1 e o pod-2 apontando para o container criado no
 googlecloud (por ser um serviço que possa ser taxado não foi criado, mas o campo image 
 especifica isso)

2 - Foi criado o arquivo svc-pod para a comunicação com o pod-2
3 - Adicionado Labels para a conexão de pos-2 e svc-pod-2
4 - Adicionado o campo Port que será onde o svc ira ouvir (lembrando que não é bidirecional)
o targetPort garante a comunicação para o pod-2
-------------------------------------PARTE 3--------------------------------------------
1 - Conforme as imagens parte 3 da pasta imagens, definimos a criação de outro svc para
que o pod-1 possa ser acessado externamente

2 - criado svc-pod-1. O node port também ira funcionar como cluster IP
3 - alterado pod-1 (sempre que alterarmos os pods ou svcs, devemos no windows power shell
 ou no git bash executar o comando abaixo para atualizar as mudanças)

kubectl apply -f \podAserAtualizado

4 - kubectl get svc exibe todos os svcs rodando
5 - adicionado o NodePort  em svc-pod-1, após rodar no power shell consigo acessar no
 navegador do windows em locahost:30000 (que foi a porta que escolhemos)

6 - Sobre LoadBalancer: è um closterIP que permite a comunicação entre uma maquina do
mundo externo com nossos pods, se integrando automaticamente ao LoadBalancer do provedor
(aws, google cloud ou Azure)

7 - Nessa etapa foi criado (no caso no cluster do google cloud) o cluster identico ao
pod-1.yaml (no "site" google cloud plataform)

8 - após criado foi usado o apply
9 - Criado svc-pod-1-LoadBalancer.yaml no Visual Code
10 - Criado o mesmo serviço LoadBalancer no google cloud e apply 

---------------------------------O que vimos até aqui--------------------------------------------

O que são e para que servem os Services
Como garantir estabilidade de IP e DNS
Como criar um Service
Labels são responsáveis por definir a relação Service x Pod
Um ClusterIP funciona apenas dentro do cluster
Um NodePort expõe Pods para dentro e fora do cluster
Um LoadBalancer também é um NodePort e ClusterIP
Um LoadBalancer é capaz de automaticamente utilizar um balanceador de carga de um cloud provider
